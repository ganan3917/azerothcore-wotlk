name: AzerothCore-WoTLK Compile

on:
  # 手动触发，可输入仓库地址、分支和模块仓库信息
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'AzerothCore-WoTLK 仓库地址'
        required: true
        default: 'https://github.com/ganan3917/azerothcore-wotlk.git'
      branch:
        description: '要编译的分支'
        required: true
        default: 'Playerbot'
      module_repo_url:
        description: '编译模块仓库地址'
        required: false
        default: 'https://github.com/ganan3917/mod-playerbots.git'
      module_branch:
        description: 'master'
        required: false
        default: 'master'
  # 每天凌晨 5 点自动触发
  schedule:
    - cron: '0 5 * * *'

jobs:
  build-and-package:
    runs-on: ubuntu-latest
    steps:
      # 安装编译所需的依赖组件
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git cmake make gcc g++ clang libmysqlclient-dev libssl-dev libbz2-dev libreadline-dev libncurses-dev mysql-server libboost-all-dev

      # 克隆 AzerothCore-WoTLK 仓库
      - name: Clone AzerothCore-WoTLK Repository
        run: |
          git clone ${{ github.event.inputs.repo_url }} -b ${{ github.event.inputs.branch }} azerothcore-wotlk
          cd azerothcore-wotlk
          git submodule update --init --recursive

      # 若提供了模块仓库地址，拉取模块到 modules 目录
      - name: Clone Module Repository (if provided)
        if: github.event.inputs.module_repo_url != ''
        run: |
          mkdir -p azerothcore-wotlk/modules
          cd azerothcore-wotlk/modules
          git clone ${{ github.event.inputs.module_repo_url }} -b ${{ github.event.inputs.module_branch }}

      # 创建构建目录
      - name: Create Build Directory
        run: mkdir -p azerothcore-wotlk/build

      # 使用 CMake 配置项目
      - name: Configure CMake
        run: |
          cd azerothcore-wotlk/build
          cmake .. -DCMAKE_INSTALL_PREFIX=./install

      # 编译项目
      - name: Compile Project
        run: |
          cd azerothcore-wotlk/build
          make -j$(nproc)

      # 显示编译后文件存储的目录
      - name: Show Compiled Files Directory
        run: |
          compiled_dir="$(pwd)/azerothcore-wotlk/build/install"
          echo "编译后的文件存储在: $compiled_dir"

      # 打包编译后的文件
      - name: Package Compiled Files
        run: |
          cd azerothcore-wotlk/build/install
          tar -czvf ../../compiled_files.tar.gz .

      # 获取当前日期
      - name: Get Current Date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%d')"

      # 创建 Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.date.outputs.date }}
          release_name: Release ${{ steps.date.outputs.date }}
          body: 'Compiled AzerothCore-WoTLK files for ${{ steps.date.outputs.date }}'
          draft: false
          prerelease: false

      # 上传打包文件到 Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./azerothcore-wotlk/compiled_files.tar.gz
          asset_name: compiled_files.tar.gz
          asset_content_type: application/gzip

      # 清理旧的 Release，仅保留最近 3 个
      - name: Clean Up Old Releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/${{ github.repository }}/releases \
            | jq -r '.[].id' \
            | sort -rn \
            | tail -n +4 \
            | while read -r id; do
                gh api --method DELETE repos/${{ github.repository }}/releases/$id
              done
