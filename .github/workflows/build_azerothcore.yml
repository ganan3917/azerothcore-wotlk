name: build_azerothcore

on:
  # 支持手动触发工作流
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2022

    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: playerbot
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          retry: 3
          
      # 安装 Boost 1.78
      - name: Install Boost 1.78
        run: |
          choco install boost-msvc-14.3 --version=1.78.0 -y
          echo "BOOST_ROOT=C:\local\boost_1_78_0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # 安装 MySQL Server 8.4
      - name: Install MySQL Server 8.4
        run: |
          choco install mysql --version=8.0.34 -y  # Chocolatey 可能没有 8.4 版本，这里用相近的 8.0.34 示例
          echo "MYSQL_DIR=C:\Program Files\MySQL\MySQL Server 8.0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # 安装 OpenSSL 3.32
      - name: Install OpenSSL 3.32
        run: |
          choco install openssl --version=3.0.8 -y  # Chocolatey 可能没有 3.32 版本，这里用 3.0.8 示例
          echo "OPENSSL_ROOT_DIR=C:\Program Files\OpenSSL-Win64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # 安装 CMake 3.31.5
      - name: Install CMake 3.31.5
        run: |
          choco install cmake --version=3.31.5 -y --installargs 'ADD_CMAKE_TO_PATH=System'

      # 安装 MS Visual Studio Community 2022
      - name: Install MS Visual Studio Community 2022
        run: |
          choco install visualstudio2022community -y --package-parameters "--add Microsoft.VisualStudio.Workload.NativeDesktop"

      # 配置和编译项目
      - name: Configure project
        run: |
          mkdir build
          cd build
          cmake .. -G "Visual Studio 17 2022"

      - name: Build project
        run: |
          cd build
          cmake --build . --config Release

      # 打包编译结果
      - name: Package build output
        run: |
          $date = Get-Date -Format "yyyyMMdd"
          Compress-Archive -Path build\Release\* -DestinationPath playerbot-$date.zip

      # 创建 Release 并上传
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ format('v{0}-{1:yyyyMMdd}', github.run_number, github.event.created_at) }}
          release_name: Playerbot Build ${{ format('{0}-{1:yyyyMMdd}', github.run_number, github.event.created_at) }}
          body: |
            Playerbot build for ${{ github.sha }}
            Date: ${{ format('{0:yyyy-MM-dd}', github.event.created_at) }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./playerbot-${{ format('{0:yyyyMMdd}', github.event.created_at) }}.zip
          asset_name: playerbot-${{ format('{0:yyyyMMdd}', github.event.created_at) }}.zip
          asset_content_type: application/zip

      # 保留最新的 3 份 Release
      - name: Delete old releases
        uses: dev-drprasad/delete-older-releases@v0.2.0
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
