name: build_azerothcore

on:
  # 手动触发，可输入仓库地址、分支和模块仓库信息
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'AzerothCore-WoTLK 仓库地址'
        required: true
        default: 'https://github.com/ganan3917/azerothcore-wotlk.git'
      branch:
        description: '要编译的分支'
        required: true
        default: 'Playerbot'
      module_repos:
        description: '模块仓库地址，多个地址用空格分隔'
        required: false
        default: 'https://github.com/ganan3917/mod-playerbots.git https://github.com/azerothcore/mod-learn-spells.git https://github.com/azerothcore/mod-autobalance.git https://github.com/azerothcore/mod-eluna.git'
  # 每天凌晨 3 点自动触发
  schedule:
    - cron: '0 3 * * *'

jobs:
  build-and-package:
    runs-on: ubuntu-22.04
    env:
      TZ: Asia/Shanghai
      AC_DIR: azerothcore-wotlk
    steps:
      
      # 缓存依赖项和编译产物
      - name: Cache dependencies and build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.AC_DIR }}
            /usr/local/include
            /usr/local/lib
          key: ${{ runner.os }}-build-${{ steps.date.outputs.date }}
          restore-keys: |
            ${{ runner.os }}-build-
      
      # 安装编译所需的依赖组件
      - name: Install Dependencies
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y git cmake make gcc g++ clang libmysqlclient-dev libssl-dev libbz2-dev libreadline-dev libncurses-dev mysql-server libboost-all-dev jq
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y gh

      # 克隆 AzerothCore-WoTLK 仓库
      - name: Clone AzerothCore-WoTLK Repository
        run: |
          set -e
          echo "Cloning repository ${{ github.event.inputs.repo_url }} on branch ${{ github.event.inputs.branch }}"
          git clone ${{ github.event.inputs.repo_url }} -b ${{ github.event.inputs.branch }} ${{ env.AC_DIR }}
          cd ${{ env.AC_DIR }}
          echo "Updating submodules"
          git submodule update --init --recursive

      # 若提供了模块仓库地址，拉取模块到 modules 目录
      - name: Clone Module Repository
        run: |
          set -e
          mkdir -p ${{ env.AC_DIR }}/modules
          cd ${{ env.AC_DIR }}/modules
          for repo in ${{ github.event.inputs.module_repos }}; do
            git clone $repo
          done

      # 创建构建目录
      - name: Create Build Directory
        run: |
          set -e
          mkdir -p ${{ env.AC_DIR }}/build

      # 使用 CMake 配置项目
      - name: Configure CMake
        run: |
          set -e
          cd ${{ env.AC_DIR }}/build
          cmake .. -DCMAKE_INSTALL_PREFIX=./install -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DWITH_WARNINGS=1 -DTOOLS_BUILD=all -DSCRIPTS=static -DMODULES=static

      # 编译项目
      - name: Compile Project
        run: |
          set -e
          cd ${{ env.AC_DIR }}/build
          make -j 4
          make install

      # 获取当前日期
      - name: Get Current Date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%d')"

      # 打包编译后的文件，修改文件名
      - name: Package Compiled Files
        run: |
          set -e
          cd ${{ env.AC_DIR }}/build/install
          tar -czvf ../../azerothcore_${{ steps.date.outputs.date }}.tar.gz .

      # 上传编译好的文件作为 artifact
      - name: Upload Compiled Files as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: azerothcore_${{ steps.date.outputs.date }}
          path: ${{ env.AC_DIR }}/build/install/azerothcore_${{ steps.date.outputs.date }}.tar.gz
