name: build_azerothcore

on:
  # 手动触发，可输入仓库地址、分支和模块仓库信息
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'AzerothCore-WoTLK 仓库地址'
        required: true
        default: 'https://github.com/ganan3917/azerothcore-wotlk.git'
      branch:
        description: '要编译的分支'
        required: true
        default: 'Playerbot'
      module_repos:
        description: '模块仓库地址，多个地址用空格分隔'
        required: false
        default: 'https://github.com/ganan3917/mod-playerbots.git https://github.com/azerothcore/mod-learn-spells.git https://github.com/azerothcore/mod-autobalance.git https://github.com/azerothcore/mod-eluna.git'
  # 每天凌晨 5 点自动触发
  schedule:
    - cron: '0 5 * * *'

jobs:
  build-and-package:
    runs-on: ubuntu-22.04
    env:
      AC_DIR: azerothcore-wotlk
    steps:
      # 安装编译所需的依赖组件
      - name: Install Dependencies
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y git cmake make gcc g++ clang libmysqlclient-dev libssl-dev libbz2-dev libreadline-dev libncurses-dev mysql-server libboost-all-dev jq
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y gh

      # 克隆 AzerothCore-WoTLK 仓库
      - name: Clone AzerothCore-WoTLK Repository
        run: |
          set -e
          echo "Cloning repository ${{ github.event.inputs.repo_url }} on branch ${{ github.event.inputs.branch }}"
          git clone ${{ github.event.inputs.repo_url }} -b ${{ github.event.inputs.branch }} ${{ env.AC_DIR }}
          cd ${{ env.AC_DIR }}
          echo "Updating submodules"
          git submodule update --init --recursive

      # 若提供了模块仓库地址，拉取模块到 modules 目录
      - name: Clone Module Repository
        run: |
          set -e
          mkdir -p ${{ env.AC_DIR }}/modules
          cd ${{ env.AC_DIR }}/modules
          for repo in ${{ github.event.inputs.module_repos }}; do
            git clone $repo
          done

      # 创建构建目录
      - name: Create Build Directory
        run: |
          set -e
          mkdir -p ${{ env.AC_DIR }}/build

      # 使用 CMake 配置项目
      - name: Configure CMake
        run: |
          set -e
          cd ${{ env.AC_DIR }}/build
          cmake .. -DCMAKE_INSTALL_PREFIX=./install -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DWITH_WARNINGS=1 -DTOOLS_BUILD=all -DSCRIPTS=static -DMODULES=static

      # 编译项目
      - name: Compile Project
        run: |
          set -e
          cd ${{ env.AC_DIR }}/build
          make -j 4
          make install

      # 打包编译后的文件
      - name: Package Compiled Files
        run: |
          set -e
          cd ${{ env.AC_DIR }}/build/install
          tar -czvf ../../compiled_files.tar.gz .

      # 获取当前日期
      - name: Get Current Date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%d')"

      # 创建 Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: compiled_files_${{ steps.date.outputs.date }}
          release_name: Compiled AzerothCore Files - ${{ steps.date.outputs.date }}
          body: 'Compiled AzerothCore files on ${{ steps.date.outputs.date }}'
          draft: false
          prerelease: false

      # 上传打包文件到 Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.AC_DIR }}/build/compiled_files.tar.gz
          asset_name: compiled_files_${{ steps.date.outputs.date }}.tar.gz
          asset_content_type: application/gzip

      # 清理旧的 Release，只保留一个
      - name: Clean Up Old Releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          latest_release_id=$(gh api repos/${{ github.repository }}/releases | jq -r 'sort_by(.created_at) | last.id')
          old_release_ids=$(gh api repos/${{ github.repository }}/releases | jq -r '.[].id | select(. != '"$latest_release_id"')')
          for id in $old_release_ids; do
            gh api --method DELETE repos/${{ github.repository }}/releases/$id
          done
